### 질문

1. 절차지향 vs 객체지향을 비교하고 객체지향을 쓰는 이유를 말해주세요

절차지향 프로그래밍(Procedural-Oriented Programming)은 ProCedural 지향.
프로시저(기능 단위) 중심로 프로그램을 짠다.
프로그램의 순서와 흐름을 먼저 세우고 필요한 자료구조와 함수들을 설계하는 방식

프로그램 대규모화, 복잡화에 효율적인 대응이 어려워짐. 
객체 단위. 모듈화의 차이.

객체지향 프로그래밍은
현실세계의 어떤 대상을 모델링한다는 관점에서 프로그래밍을 함.
모델링한 객체를 중심으로 각 객체들을 모듈화. 이들이 서로 유기적으로 동작하는 프로그램 작성.

@객체지향의 특징 4가지

상 추 캡 다

- 상속(계층화) : 
중복된 코드를 상위개체로 묶어 하위개체들이 공통된 코드를 공유
하위개체가 상위개체의 속성을 물려받을 수 있음

상속의 형태 -  클래스의 상속(Extends)과 인터페이스의 구현(Implements)
extends. is-a 관계
A라는 기반속성을 바탕으로 하위개체에서 A+a 확장
(다중상속불가능, 메서드 overriding은 선택적) 

implements. can-do 관계 
A라는 틀을 바탕으로 하위개체에서 구체적인 내용을 채워 표준화된 규격 실행
(다중상속 가능, 모든메서드 구현필요)

위임Delegation. has-a 관계
다른 클래스의 인스턴스를 가져와 쓰는 관계
A클래스의 속성 a를 B가 빌려씀
동적인관계로 런타임시간동안 관계가 변동될 수 있음(A객체의 인스턴스를 B객체의 인스턴스로 대체 가능)


- 추상화 : 공통의 속성이나 기능을 묶어 클래스로 정의하는 것.

- 캡슐화(은닉성) : 객체를 캡슐로 싸듯 내부를 보호하고 볼 수 없게 하는 것.
	접근제어자 private 
	+ 접근메소드 getter : 외부에서는 읽기만 가능. 변수의 노출 제한(편의성/보안)
		    / setter : 외부에서 값할당시 조건설정(예외처리 등)하여 프로그램 안정성 높임

- 다형성
같은 메서드 이름으로 다른 동작을 하는 것. 

오버로딩 : 과적. 같은 이름에 다른 기능을 쌓아올림. 메소드 이름은 같지만 다른 인자를 가진 여러 메소드를 가지는 것. 
오버라이딩 : 재정의. 상위클래스 메소드를 하위클래스에서 다른로직으로 재정의하는 것



2. 클래스 vs 객체 vs 인스턴스 vs 생성자의 차이점을 말해주세요

클래스 : 객체를 만들어내기 위한 설계도/틀 정의. 속성(필드)과 동작(메소드)으로 구성

객체 : 소프트웨어에서 구현하고자하는 대상(클래스의 인스턴스). 추상적인 개념 + 메모리할당x 상태의 인스턴스.
	클래스 타입으로 선언됐을 때 객체라 하고, 해당 객체가 메모리에 할당되어 실제로 사용될 때 인스턴스라 부른다.

인스턴스 : 설계도를 바탕으로 구현된 구체적인 실체(실체화한 대상). new 키워드를 사용하여 클래스를 메모리에 생성함..
	객체에 포함되는 개념

생성자 : 메소드의 일종. 메소드지만 클래스 이름과 동일. 반환형이 없다.
인스턴스가 생성될 때, 딱 한 번 호출되어 인스턴스 필드 초기화 기능을 한다.



3. 오버라이딩vs오버로딩 차이점을 말해주세요

오버로딩 : 과적. 같은 이름에 다른 기능을 쌓아올림. 메소드 이름은 같지만 다른 인자를 가진 여러 메소드를 가지는 것. 
오버라이딩 : 재정의. 상위클래스 메소드를 하위클래스에서 다른로직으로 재정의하는 것



4. static 키워드는 언제 쓰면 좋을까요? 언제 쓰면 좋지 않을까요?

1) 공유되는 데이터를 다룰 때 사용. 코드간편화 및 메모리 사용 효율화
(생성할때마다 고정메모리에 올라가므로 인스터스 생성때마다 heap메모리에 올리는거보다 빠르고 효율적) 
  
2) 바뀌지 않는 값에 final과 함께 사용. 
3) static메서드에서 접근할때 사용
(static메서드는 non-stitic보다 먼저 생성되기 때문에, non-static 필드나 메서드에 접근 불가능) 
로

----
단점
1) 무분별한 static사용은 메모리 누수의 원인이 됨(static은 프로그램종료시점에 메모리반환. gc 대상이 아님)
재할당을 여러번한다거나..하면 메모리누수.

2) non-thread-safe : 프로그램 전역에서 사용되기 때문에 모든 스레드에서 공유함. 한 스레드에서 값을 변경하면 다른 모든 스레드에서 영향을 받음. 동시성 문제 야기

동시성 문제 야기  -  여러스레드가 동시에 자원활용.( 해결방법 : 암시적락(싱크로나이즈드 키워드) / 명시적락 / 스레드안전객체사용 / 불변개체사용)
https://zerry82.tistory.com/81


(1)데드락(DeadLock) 문제
A스레드가 a 모니터의 잠금을 얻고 b모니터의 잠금을 얻으려하고
B스레드가 b 모니터의 잠금을 얻고 a모니터의 잠금을 얻으려 할 때 
교착상태가되어 프로그램 진행불가

(2) 가시성(visiblilty; 메모리 가시성) 문제 
여러 개의 스레드가 사용됨에 따라 CPU 캐시메모리와 RAM 데이터가 서로 일치하지 않아 생기는 문제.
한 스레드가 연산을 수행한 결과를 다른 스레드가 볼 수없는 경우가 생김(비가시성)
원하는 결과값과 다른 결과값을 얻을 수 있음.
가시성이 보장되어야하는 변수를 cache memory에서 읽는 것이 아니라, Ram에서만 읽도록 보장하여 문제해결(volatile)
 
![비가시성 문제](https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2F9wbkl%2FbtqxZpzWoIN%2Fb40h2vF6JI1Xcyg3HUZKxk%2Fimg.png)

(3) 원자성(atomicity;연산의 원자성) : 여러 스레드가 공유자원에 동시에 연산을 할 경우 잘못된 결과를 반환함.
여러 자바의 연산은 바이트코드로 이루어져 있는데, 
하나의 연산을 수행하기 위해  바이트코드가 수행될 때 
중간에 다른 쓰레드가 끼어들어서 연산의 결과가 올바르지 않게 변하면 원자성 문제 발생.

(4) 실행순서(ordering) : 코드상의 연산 순서가 CPU에서 수행되는 순서와 다를 수 있음


5. object클래스란 무엇인가요? object클래스의 메서드들은 무엇이 있나요?
자바의 최상위 클래스(모든 클래스들의 상위클래스)
자바는 기본적으로 아무런 상속을 받지 않으면 java.lang.Object 클래스를 확장.
모든 클래스가 기본적으로 가져야 할 것들을 Object 정의.

1) clone()	 객체의 복사본 리턴
2) equals(Object obj)	객체가 같은지 확인
3) finalize()	현재 객체가 더 이상 쓸모가 없어졌을 때 가비지 컬렉터에 의해서 이 메소드가 호출된다.
4) getClass()	해당 인스턴스의 클래스를 리턴
5) hashCode()	객체에 대한 해시코드값을 리턴
6) toString()	객체를 문자열로 표현하는 값을 리턴한다.

7) public void notify()	이 객체의 모니터에 대기하고 있는 단일 스레드를 깨운다.
8) public void notifyAll()	이 객체의 모니터에 대기하고 있는 모든 스레드를 깨운다.
9) public void wait()	다른 스레드가 현재 객체에 대한 notify() 메소드나 notifyAll() 메소드를 호출할 때까지 현재 스레드가 대가하고 있도록 한다.
10) public void wait(long timeout)	wait() 메소드와 동일한 기능을 제공하며, 매개 변수에 지정한 시간만큼만 대기한다. 즉, 매개변수 시간을 넘어 섰을 때에는 현재 스레드는 다시 깨어난다. 시간은 밀리초 단위다.
11) public void wait(long timeout, int nanos)	wait()메소드와 동일한 기능을 제공한다. 이 메소드는 밀리초 + 나노초(1/1,000,000,000)만큼만 대기한다.


6. (추가) 각자 클래스에 대해 공부하면서 궁금했던 점들을을 질문해주세요



